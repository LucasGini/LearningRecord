// 箭头函数

// 箭头函数与普通函数的对比
// 1）基本用法
// 箭头函数的格式没有了function，用()=>{}声明函数
let person = () => {
    console.log("大家好");
};
// 相当于
function person1() {
    console.log("大家好");
}

// 2）箭头函数return
// 箭头函数没有{},则代表返回，相当于普通函数的return
let person2 = () => '大家好';
// 相当于
function person3() {
    return '大家好！'
}

// 3）箭头函数传参
// 箭头函数与普通函数传参没有什么区别，都是写在括号中
let person4 = (name, age) => {
    console.log(name, age);
};
person4('张三', 20);      // 结果：张三 20
// 相当于
function person5(name, age) {
    console.log(name,age);
}
person5('李四', 21);      // 结果：李四 21

// 箭头函数只传一个参数可以把圆括号去掉
let person6 = name => {
    console.log(name);
};
person6('王五');      // 结果：王五

// 箭头函数不支持arguments功能，但是可以使用扩展运算符实现arguments功能
function person7() {
    let args = arguments;
    console.log(args);
}
person7(1, 2, 3, '张三');     // 结果：Arguments(4)[1, 2, 3, '张三', callee: ƒ, Symbol(Symbol.iterator): ƒ]
// 相当于
let person8 = (...args) => {
    console.log(args);
};
person8(1, 2, 3, '李四')      // 结果：[1, 2, 3, '李四']

// 4）箭头函数返回对象字面量
// 如果箭头函数返回对象字面量，需要加上圆括号
let person9 = () => ({name:'张三', age: 30});
console.log(person9());

// 5）高阶函数
// 可以传入另一个函数作为参数的函数就是高阶函数
let person10 = () => wrap => prop => {
    console.log(wrap, prop);
};
person10()('我是wrap')('我是prop');     // 结果：我是wrap 我是prop
// 上述箭头函数执行路径：person10=()是第一层函数，对应下面的person11()函数，这样就执行了第一层；
// 接着person10 = () => wrap,返回了一个参数为wrap的匿名函数，对应下面的('我是wrap')，这样就执行了第二层；
// 接下来person10 = () => wrap => prop，返回了一个参数为prop的你们函数，对应下面的('我是prop')，这样就执行了第三层，全部执行完毕
// 相当于
function person11 () {
    return function (wrap) {
        return function (prop) {
            console.log(wrap, prop);
        }
    }
}
person11()('我是wrap')('我是prop');     // 结果：我是wrap 我是prop

// 2、箭头函数与this
var person12 = {
    name: '张三',
    getName: function () {
        console.log(this);
        console.log(this.name);
    }
}
person12.getName();     // this指向person对象本身 张三
var getName = person12.getName;
getName();      // this指向person对象本身 空
// 如何了解this指向：谁调用，this就指向谁
// person12.getName方法赋给getName，然后调用getName()函数， 只需知道getName这个变量属于谁，那么this就指向谁。
// 在最外层 var getName是一个全局变量，全局变量默认都属于Windows， var getName 等同于window.getName, 所以person12.getName方法中的this就是window

// 如何在最外层定义全局变量时把this指向person12,如下所示
var getName1 = person12.getName.bind(person12);
getName1();

var person13 = {
    name: '张三',
    getName: function () {
        setTimeout(function () {
            console.log(this);      // 由于setTimeout属于window，所以this指向了window
            console.log(this.name);
        }, 30);
    }
}
person13.getName();     // this指向window 空
// 可以使用箭头函数解决this指向问题
/*
setTimeout第一个参数由function变成了箭头函数()=>{}，由于箭头函数没有this绑定，
如果箭头函数被非箭头函数包裹，this绑定的就是最近一层非箭头函数的this，所以this指向person14
*/
var person14 = {
    name: '张三',
    getName: function () {
        setTimeout(() => {
            console.log(this);
            console.log(this.name);
        });
    }
}
person14.getName();     // this指向person对象本身 张三
