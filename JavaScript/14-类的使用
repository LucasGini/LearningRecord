JavaScript语言的传统方法是通过构造函数定义并生成新对象。function即是对象，对象即是function。没有class的概念。ES6提供了更接近传统语言的写法。如Java、PHP等后端语言，引入了class这个概念，作为对象的模板

// 传统写法
function Person(name, age) {
    // 属性
    this.name = name;
    this.age = age;
}

// 方法
Person.prototype.show = function () {
    console.log(this.name, this.age);
}

let person = new Person('张三', 20);      // 实例对象
person.show();     // 调用方法

// ES6写法
class Person1 {
    // 构造函数
    constructor(name, age) {    // 使用constructor()定义构造函数
        this.name = name;
        this.age = age;
    }
    // 方法
    show () {       // show()方法等价于Person1.prototype.show
        console.log(this.name, this.age);
    }
}
let person1 = new Person1('李四', 32);        // 实例化对象
person1.show();     // 调用方法


// 类也可以像函数一样使用表达式的形式定义
let Person2 = class {
    //  构造函数
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
}
let person2 = new Person2('王五', 23);
console.log(person2.name);


// 1) 单例模式
// 使用类表达式，通过new class()函数可以实现单例模式(无法再实例化一个Person对象)
let person3 = new class {
    // 构造函数
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
} ('张三', 20);
console.log(person3.name);

// 2）访问器属性
// 访问器属性是在类中通过set和get创建，set用于设置值，get用于获取值

class Person4 {
    // 构造函数
    constructor(name, age) {
        this._name = name;      // 命名规范：代表该属性只能通过方法访问该属性
        this.age = age;
    }
    set name(val) {     // set name()方法有一个参数可以接收到person.name设置的值，person.name每次改变就会调用set name()方法
        console.log(val);
        this._name = val;
    }

    get name() {    // 利用 get name()返回this._name
        return this._name;
    }
}

let person4 = new Person4('张三', 30);    // 实例化对象
person4.name = '李四';
console.log(person4.name);      // 如果没有get，结果返回undefined；如果有get，结果为返回值

// 3）静态方法
// 静态方法不用创建实例即可调用。静态方法效率上要比实例化高，因为只会被初始化一次，不会创建几次对象就被初始化几次，节省每次创建对象的内存空间
// 静态方法一般用在频繁使用的地方，如工具类

class Person5 {
    static show () {    // 使用static定义的方法就是静态方法
        console.log('我是静态方法');
    }
}
Person5.show();

// 4）extends 继承

// 父类
class Person6 {
    // 构造方法
    constructor(name) {
        this.name = name;
    }
    run () {
        console.log('人类在跑');
    }
}

// 子类

class Spiderman extends Person6 {   // 使用extends继承Person6类，Spiderman为子类，Person6为父类，子类可以调用父类的属性和方法
    constructor(name) {
        super(name);    // 子类如果定义了构造方法，就必须调用super()方法，如果子类没有构造方法，创建实例时会自动调用super()方法并传入所有参数
    }
}
let spiderman = new Spiderman('蜘蛛侠');       // 实例化子类
console.log(spiderman.name);     // 结果：蜘蛛侠
spiderman.run();        // 调用父类的run()方法

// 子类重写父类中的方法

// 子类
class Spiderman1 extends Person6 {
    run() {
        // 调用父类this.name
        console.log(this.name + "再跑！");
    }
}
let sl = new Spiderman1('蜘蛛侠');
sl.run();

// 子类调用父类的方法

class Spiderman2 extends Person6 {
    run() {
        // 调用父类的run()方法
        super.run();
        // 调用父类this.name
        console.log(this.name + "再跑！");
    }
}
let sl1 = new Spiderman2('蜘蛛侠');
sl1.run();
